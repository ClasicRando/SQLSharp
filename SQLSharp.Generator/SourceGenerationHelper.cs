using System.Text;
using Microsoft.CodeAnalysis;
using SQLSharp.Generator.Common;
using SQLSharp.Generator.Result;

namespace SQLSharp.Generator;

public static class SourceGenerationHelper
{
    private static readonly DiagnosticDescriptor TypeIsNotPartial =
        new(
            "SQLSHARP001",
            "Annotated row type is not partial",
            "'{0}' must be partial to allow for adding extra behaviour",
            "FromRowGenerator",
            DiagnosticSeverity.Error,
            true);

    public const string RenameEnum =
        """
        // <auto-generated/>
        #nullable enable

        namespace SQLSharp.Generator.Result;
        
        public enum Rename
        {
            SnakeCase,
            CamelCase,
            PascalCase,
            UpperCase,
            LowerCase,
            None,
        }
        """;

    public const string FromRowAttribute =
        """
        // <auto-generated/>
        #nullable enable

        namespace SQLSharp.Generator.Result;

        [global::System.AttributeUsage(validOn: global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct)]
        public sealed class FromRowAttribute : global::System.Attribute
        {
            public Rename RenameAll { get; set; } = Rename.None;
        }
        """;

    public const string ColumnAttribute =
        """
        // <auto-generated/>
        #nullable enable

        namespace SQLSharp.Generator.Result;

        [global::System.AttributeUsage(validOn: global::System.AttributeTargets.Parameter | global::System.AttributeTargets.Property)]
        public sealed class ColumnAttribute : global::System.Attribute
        {
            public string Rename { get; set; } = string.Empty;
            public bool Flatten { get; set; } = false;
        }
        """;

    public static string GenerateRowParserPartialClass(
        RowParserToGenerate rowParserToGenerate,
        SourceProductionContext sourceProductionContext)
    {
        if (!rowParserToGenerate.IsPartial)
        {
            sourceProductionContext.ReportDiagnostic(
                Diagnostic.Create(TypeIsNotPartial, Location.None,
                    rowParserToGenerate.Name));
            return string.Empty;
        }

        ConstructorData? constructor;
        if (rowParserToGenerate.IsStruct)
        {
            constructor = rowParserToGenerate.Constructors
                .OrderByDescending(c => c.Parameters.Length)
                .FirstOrDefault();
        }
        else
        {
            constructor = rowParserToGenerate.Constructors
                .OrderBy(c => c.Parameters.Length)
                .FirstOrDefault();
        }

        var instanceBuilder = constructor is null
            ? BuildInitializer(rowParserToGenerate)
            : BuildConstructorCall(rowParserToGenerate, constructor);

        var type = rowParserToGenerate.IsStruct ? "struct" : "class";
        var typeNamespace = string.IsNullOrWhiteSpace(rowParserToGenerate.Namespace)
            ? string.Empty
            : $"{rowParserToGenerate.Namespace}.";
        return
            $$"""
              // <auto-generated/>
              #nullable enable
              
              partial {{typeNamespace}}{{type}} {{rowParserToGenerate.Name}} : SQLSharp.Result.IFromRow<{{rowParserToGenerate.Name}}>
              {
                  public static {{rowParserToGenerate.Name}} FromRow(SQLSharp.Result.IDataRow row)
                  {
                      return new {{rowParserToGenerate.Name}}{{instanceBuilder}};
                  }
              }
              """;
    }

    private static string BuildInitializer(RowParserToGenerate rowParserToGenerate)
    {
        InitializerData initializerData = rowParserToGenerate.InitializerData;
        var builder = new StringBuilder(initializerData.Properties.Length > 0
            ? "\n        {\n            "
            : "{");
        for (var index = 0; index < initializerData.Properties.Length; index++)
        {
            FieldData field = initializerData.Properties[index];
            
            var fieldName = field.HasRename
                ? field.ResultFieldName
                : rowParserToGenerate.Rename.TransformRowFieldName(field.ResultFieldName);

            builder.Append(field.Name);
            builder.Append(" = ");

            if (field.Flatten)
            {
                builder.AppendFullTypeName(field.TypeData);
                builder.Append(".FromRow(row)");
                continue;
            }

            if (field.TypeData.IsDecode)
            {
                builder.AppendFullTypeName(field.TypeData);
                builder.Append(".Decode(row, row.IndexOf(\"");
                builder.Append(fieldName);
                builder.Append("\"))");
                continue;
            }

            builder.Append("row.GetField");
            if (!field.TypeData.IsNullable)
            {
                builder.Append("NotNull");
            }

            builder.Append('<');
            builder.AppendFullTypeName(field.TypeData);
            if (field.TypeData is { IsRefType: false, IsNullable: true })
            {
                builder.Append('?');
            }
            builder.Append('>');
            builder.Append("(\"");
            builder.Append(fieldName);
            builder.AppendLine("\"),");
            
            if (index >= initializerData.Properties.Length - 1) continue;
            
            builder.Append("            ");
        }
        builder.Append("        }");
        return builder.ToString();
    }

    private static string BuildConstructorCall(
        RowParserToGenerate rowParserToGenerate,
        ConstructorData constructor)
    {
        var builder = new StringBuilder(constructor.Parameters.Length > 0
            ? "(\n            "
            : "(");
        for (var index = 0; index < constructor.Parameters.Length; index++)
        {
            FieldData field = constructor.Parameters[index];
            
            var fieldName = field.HasRename
                ? field.ResultFieldName
                : rowParserToGenerate.Rename.TransformRowFieldName(field.ResultFieldName);

            builder.Append(field.Name);
            builder.Append(": ");

            if (field.Flatten)
            {
                builder.AppendFullTypeName(field.TypeData);
                builder.Append(".FromRow(row)");
                continue;
            }

            if (field.TypeData.IsDecode)
            {
                builder.AppendFullTypeName(field.TypeData);
                builder.Append(".Decode(row, row.IndexOf(\"");
                builder.Append(fieldName);
                builder.Append("\"))");
                continue;
            }

            builder.Append("row.GetField");
            if (!field.TypeData.IsNullable)
            {
                builder.Append("NotNull");
            }

            builder.Append('<');
            builder.AppendFullTypeName(field.TypeData);
            if (field.TypeData is { IsRefType: false, IsNullable: true })
            {
                builder.Append('?');
            }
            builder.Append('>');
            builder.Append("(\"");
            builder.Append(fieldName);
            builder.Append("\")");

            if (index >= constructor.Parameters.Length - 1) continue;

            builder.Append(',');
            builder.AppendLine();
            builder.Append("            ");
        }
        builder.Append(')');
        return builder.ToString();
    }
}
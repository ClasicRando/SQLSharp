using System.Text;

namespace SQLSharp.Generator.Repository;

public static class SourceGenerationHelper
{
    public const string RepositoryAttribute =
        """
        // <auto-generated/>
        #nullable enable

        namespace SQLSharp.Generator.Repository;

        [global::System.AttributeUsage(validOn: global::System.AttributeTargets.Interface)]
        public sealed class RepositoryAttribute : global::System.Attribute
        {
            public global::Sytem.Type[] ParameterTypes { get; }
            
            public RepositoryAttribute(params global::Sytem.Type[] parameterTypes)
            {
                ParameterTypes = parameterTypes;
            }
        }
        """;
    
    public const string QueryAttribute =
        """
        // <auto-generated/>
        #nullable enable

        namespace SQLSharp.Generator.Repository;

        [global::System.AttributeUsage(validOn: global::System.AttributeTargets.Interface)]
        public sealed class QueryAttribute : global::System.Attribute
        {
            public string Query { get; }
            
            public QueryAttribute(string query)
            {
                Query = query;
            }
        }
        """;

    public const string ParameterAttribute =
        """
        // <auto-generated/>
        #nullable enable

        namespace SQLSharp.Generator.Repository;

        [global::System.AttributeUsage(validOn: global::System.AttributeTargets.Parameter)]
        public sealed class ParameterAttribute : global::System.Attribute
        {
            public string Rename { get; set; } = string.Empty;
        }
        """;

    public static string GenerateRepositoryClass(RepositoryToGenerate repositoryToGenerate)
    {
        var namespacePrefix = string.IsNullOrEmpty(repositoryToGenerate.Namespace)
            ? string.Empty
            : repositoryToGenerate.Namespace + '.';
        var className = repositoryToGenerate.InterfaceName.StartsWith("I")
            ? repositoryToGenerate.InterfaceName.Substring(1)
            : repositoryToGenerate.InterfaceName + "Impl";

        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated/>");
        builder.AppendLine("#nullable enable");
        builder.Append("public sealed class ");
        builder.Append(namespacePrefix);
        builder.Append(className);
        builder.Append("() : ");
        builder.Append(namespacePrefix);
        builder.AppendLine(repositoryToGenerate.InterfaceName);
        builder.AppendLine("{");
        builder.AppendLine("}");

        return builder.ToString();
    }
}